{"version":3,"sources":["Firebase.js","Todo.js","App.js","reportWebVitals.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","Todo","props","classes","useState","open","setOpen","input","setInput","Modal","onClose","e","className","Input","placeholder","todo","value","onChange","event","target","Button","onClick","collection","doc","id","set","merge","List","ListItem","ListItemAvatar","ListItemText","primary","secondary","delete","App","todos","setTodos","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","FormControl","InputLabel","disabled","type","preventDefault","add","timestamp","FieldValue","serverTimestamp","variant","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16031a16.chunk.js","sourcesContent":["// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nimport firebase from \"firebase\";\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyB6EoniITvnq8YKM81PYiczsEQGyih-QMc\",\n  authDomain: \"todo-app-d4544.firebaseapp.com\",\n  projectId: \"todo-app-d4544\",\n  storageBucket: \"todo-app-d4544.appspot.com\",\n  messagingSenderId: \"262037761262\",\n  appId: \"1:262037761262:web:2eb64d7c3cd882cc4197ff\",\n  measurementId: \"G-NVNN0CY5D1\",\n});\n\nconst db = firebaseApp.firestore();\n\nexport default db;\n","import {\n  Button,\n  Input,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Modal,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport \"./Todo.css\";\nimport db from \"./Firebase\";\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: \"absolute\",\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 3, 4),\n  },\n}));\n\nfunction Todo(props) {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [input, setInput] = useState();\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const updateTodo = () => {\n    //update todo with new input text\n\n    db.collection(\"todos\").doc(props.todo.id).set(\n      {\n        todo: input,\n      },\n      { merge: true }\n    );\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Modal open={open} onClose={(e) => setOpen(false)}>\n        <div className={classes.paper}>\n          <h1>I m a Modal</h1>\n          <Input\n            placeholder={props.todo.todo}\n            value={input}\n            onChange={(event) => setInput(event.target.value)}\n          />\n          <Button onClick={updateTodo}>Update Todo</Button>\n        </div>\n      </Modal>\n      <List className=\"todo__list\">\n        <ListItem>\n          <ListItemAvatar></ListItemAvatar>\n          <ListItemText primary=\"Todo..\" secondary={props.todo.todo} />\n        </ListItem>\n\n        <EditIcon onClick={(e) => setOpen(true)}> Edit</EditIcon>\n\n        <DeleteForeverIcon\n          onClick={(event) =>\n            db.collection(\"todos\").doc(props.todo.id).delete()\n          }\n        />\n      </List>\n    </>\n  );\n}\n\nexport default Todo;\n","import React from \"react\";\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { Button, FormControl, InputLabel, Input } from \"@material-ui/core\";\nimport Todo from \"./Todo\";\nimport db from \"./Firebase\";\nimport firebase from \"firebase\";\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n  // when app loads, we need to listen to the databade and fetch new todos as they get added/removed\n  useEffect(() => {\n    //this code here fires when app.js loads\n    db.collection(\"todos\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        setTodos(\n          snapshot.docs.map((doc) => ({ id: doc.id, todo: doc.data().todo }))\n        );\n      });\n  }, []);\n\n  const addTodo = (event) => {\n    event.preventDefault(); // it will stop the refresh\n\n    db.collection(\"todos\").add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n    // this will fire hen we click the button\n    setTodos([...todos, input]);\n    setInput(\"\"); // to clear after submit\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Todo List App</h1>\n      <form>\n        <FormControl>\n          <InputLabel>Write a Todo</InputLabel>\n          <Input\n            value={input}\n            onChange={(event) => setInput(event.target.value)}\n          />\n        </FormControl>\n\n        <Button\n          disabled={!input}\n          type=\"submit\"\n          onClick={addTodo}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Add Todo\n        </Button>\n      </form>\n\n      <ul>\n        {todos.map((todo) => (\n          // <li>{todo}</li>\n          <Todo todo={todo} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}